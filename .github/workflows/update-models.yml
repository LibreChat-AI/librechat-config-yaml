name: Update AI Models

on:
  schedule:
    # Run every Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch: # Allow manual triggering

jobs:
  update-models:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
      
      - name: Verify installation
        run: |
          echo "Python version:"
          python --version
          which python
          echo "Installed packages:"
          pip list
          echo "Testing import:"
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import yaml; print('PyYAML version:', yaml.__version__)"
      
      - name: Run automated model update
        id: update
        env:
          UPDATE_TEST_ONLY: 'true'
          AI302_API_KEY: ${{ secrets.AI302_API_KEY }}
          APIPIE_API_KEY: ${{ secrets.APIPIE_API_KEY }}
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GLHF_API_KEY: ${{ secrets.GLHF_API_KEY }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
          HYPERBOLIC_API_KEY: ${{ secrets.HYPERBOLIC_API_KEY }}
          KLUSTER_API_KEY: ${{ secrets.KLUSTER_API_KEY }}
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          NANOGPT_API_KEY: ${{ secrets.NANOGPT_API_KEY }}
          NVIDIA_API_KEY: ${{ secrets.NVIDIA_API_KEY }}
          OPENROUTER_KEY: ${{ secrets.OPENROUTER_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          SAMBANOVA_API_KEY: ${{ secrets.SAMBANOVA_API_KEY }}
          TOGETHERAI_API_KEY: ${{ secrets.TOGETHERAI_API_KEY }}
          UNIFY_API_KEY: ${{ secrets.UNIFY_API_KEY }}
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
        run: |
          python -m pip list | grep -i yaml
          cd scripts
          python automated_update.py
          echo "UPDATE_EXIT_CODE=$?" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: Check for changes
        id: changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
            echo "Changes detected in YAML files"
          else
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi
      
      - name: Get current date
        id: date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Commit and push changes (if validation passed)
        if: steps.changes.outputs.HAS_CHANGES == 'true' && env.YAML_VALIDATION_FAILED != 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add librechat-test.yaml
          git commit -m "chore: update AI models (${{ steps.date.outputs.DATE }})"
          git push
      
      - name: Create Pull Request (if validation failed)
        if: steps.changes.outputs.HAS_CHANGES == 'true' && env.YAML_VALIDATION_FAILED == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update AI models (${{ steps.date.outputs.DATE }}) [YAML VALIDATION FAILED]"
          branch: automated-update-${{ steps.date.outputs.DATE }}
          delete-branch: true
          title: '⚠️ AI Models Update - YAML Validation Failed (${{ steps.date.outputs.DATE }})'
          body: |
            ## ⚠️ YAML Validation Failed
            
            This automated update encountered YAML parsing errors and requires manual review.
            
            ### Validation Errors
            ```
            ${{ env.VALIDATION_ERRORS }}
            ```
            
            ### What to do
            1. Review the changes in `librechat-test.yaml`
            2. Fix any YAML syntax errors
            3. Test the configuration locally
            4. Merge this PR once validated
            
            ### Details
            - **Date**: ${{ steps.date.outputs.DATE }}
            - **Triggered by**: Automated workflow
            - **Exit code**: ${{ steps.update.outputs.UPDATE_EXIT_CODE }}
            
            @Berry-13 Please review this update.
          labels: |
            automated
            needs-review
            yaml-error
          assignees: Berry-13
          reviewers: Berry-13
      
      - name: Notify on success
        if: steps.changes.outputs.HAS_CHANGES == 'true' && env.YAML_VALIDATION_FAILED != 'true' && success()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `✅ **AI Models Updated Successfully**\n\nDate: ${{ steps.date.outputs.DATE }}\nFile: librechat-test.yaml\n\nChanges have been committed to the main branch.`;
            console.log(message);
            
            // Optional: Send to webhook if configured
            if (process.env.WEBHOOK_URL) {
              await fetch(process.env.WEBHOOK_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text: message })
              });
            }
        env:
          WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK }}
      
      - name: Notify on validation failure
        if: steps.changes.outputs.HAS_CHANGES == 'true' && env.YAML_VALIDATION_FAILED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const message = `⚠️ **AI Models Update - Validation Failed**\n\nDate: ${{ steps.date.outputs.DATE }}\n\nYAML validation failed. A pull request has been created for manual review.\n\nErrors:\n${process.env.VALIDATION_ERRORS}\n\n@Berry-13`;
            console.log(message);
            
            // Optional: Send to webhook if configured
            if (process.env.WEBHOOK_URL) {
              await fetch(process.env.WEBHOOK_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text: message })
              });
            }
        env:
          WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK }}
          VALIDATION_ERRORS: ${{ env.VALIDATION_ERRORS }}
      
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `❌ **AI Models Update Failed**\n\nDate: ${{ steps.date.outputs.DATE }}\n\nThe automated update process encountered an error. Please check the workflow logs.\n\n@Berry-13`;
            console.log(message);
            
            // Optional: Send to webhook if configured
            if (process.env.WEBHOOK_URL) {
              await fetch(process.env.WEBHOOK_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text: message })
              });
            }
        env:
          WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK }}
      
      - name: No changes notification
        if: steps.changes.outputs.HAS_CHANGES != 'true' && success()
        run: |
          echo "✅ Update check completed - no model changes detected"